
linefollower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001440  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800154c  0800154c  0001154c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800156c  0800156c  0001156c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001570  08001570  00011570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000090  2000000c  08001580  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000009c  08001580  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001016c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021fc  00000000  00000000  000301a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005242  00000000  00000000  0003239d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000778  00000000  00000000  000375e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e0  00000000  00000000  00037d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000043ed  00000000  00000000  00038738  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000030b2  00000000  00000000  0003cb25  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003fbd7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001580  00000000  00000000  0003fc54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001534 	.word	0x08001534

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001534 	.word	0x08001534

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f9b8 	bl	80004d8 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f97a 	bl	8000470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f953 	bl	800044c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f8b6 	bl	800131c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000200:	2300      	movs	r3, #0
{ 
 8000202:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000204:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000206:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800020a:	2b01      	cmp	r3, #1
 800020c:	d074      	beq.n	80002f8 <HAL_ADC_ConfigChannel+0xf8>
 800020e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000210:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000212:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000216:	2d06      	cmp	r5, #6
 8000218:	6802      	ldr	r2, [r0, #0]
 800021a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800021e:	680c      	ldr	r4, [r1, #0]
 8000220:	d825      	bhi.n	800026e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000222:	442b      	add	r3, r5
 8000224:	251f      	movs	r5, #31
 8000226:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000228:	3b05      	subs	r3, #5
 800022a:	409d      	lsls	r5, r3
 800022c:	ea26 0505 	bic.w	r5, r6, r5
 8000230:	fa04 f303 	lsl.w	r3, r4, r3
 8000234:	432b      	orrs	r3, r5
 8000236:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000238:	2c09      	cmp	r4, #9
 800023a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800023e:	688d      	ldr	r5, [r1, #8]
 8000240:	d92f      	bls.n	80002a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000242:	2607      	movs	r6, #7
 8000244:	4423      	add	r3, r4
 8000246:	68d1      	ldr	r1, [r2, #12]
 8000248:	3b1e      	subs	r3, #30
 800024a:	409e      	lsls	r6, r3
 800024c:	ea21 0106 	bic.w	r1, r1, r6
 8000250:	fa05 f303 	lsl.w	r3, r5, r3
 8000254:	430b      	orrs	r3, r1
 8000256:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000258:	f1a4 0310 	sub.w	r3, r4, #16
 800025c:	2b01      	cmp	r3, #1
 800025e:	d92b      	bls.n	80002b8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000260:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000262:	2200      	movs	r2, #0
 8000264:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000268:	4618      	mov	r0, r3
 800026a:	b002      	add	sp, #8
 800026c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800026e:	2d0c      	cmp	r5, #12
 8000270:	d80b      	bhi.n	800028a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000272:	442b      	add	r3, r5
 8000274:	251f      	movs	r5, #31
 8000276:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000278:	3b23      	subs	r3, #35	; 0x23
 800027a:	409d      	lsls	r5, r3
 800027c:	ea26 0505 	bic.w	r5, r6, r5
 8000280:	fa04 f303 	lsl.w	r3, r4, r3
 8000284:	432b      	orrs	r3, r5
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
 8000288:	e7d6      	b.n	8000238 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800028a:	442b      	add	r3, r5
 800028c:	251f      	movs	r5, #31
 800028e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000290:	3b41      	subs	r3, #65	; 0x41
 8000292:	409d      	lsls	r5, r3
 8000294:	ea26 0505 	bic.w	r5, r6, r5
 8000298:	fa04 f303 	lsl.w	r3, r4, r3
 800029c:	432b      	orrs	r3, r5
 800029e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80002a0:	e7ca      	b.n	8000238 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80002a2:	2607      	movs	r6, #7
 80002a4:	6911      	ldr	r1, [r2, #16]
 80002a6:	4423      	add	r3, r4
 80002a8:	409e      	lsls	r6, r3
 80002aa:	ea21 0106 	bic.w	r1, r1, r6
 80002ae:	fa05 f303 	lsl.w	r3, r5, r3
 80002b2:	430b      	orrs	r3, r1
 80002b4:	6113      	str	r3, [r2, #16]
 80002b6:	e7cf      	b.n	8000258 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <HAL_ADC_ConfigChannel+0xfc>)
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d116      	bne.n	80002ec <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002be:	6893      	ldr	r3, [r2, #8]
 80002c0:	021b      	lsls	r3, r3, #8
 80002c2:	d4cd      	bmi.n	8000260 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002c4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002c6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002cc:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002ce:	d1c7      	bne.n	8000260 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002d0:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <HAL_ADC_ConfigChannel+0x100>)
 80002d2:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <HAL_ADC_ConfigChannel+0x104>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80002da:	230a      	movs	r3, #10
 80002dc:	4353      	muls	r3, r2
            wait_loop_index--;
 80002de:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002e0:	9b01      	ldr	r3, [sp, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0bc      	beq.n	8000260 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002e6:	9b01      	ldr	r3, [sp, #4]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	e7f8      	b.n	80002de <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002f4:	2301      	movs	r3, #1
 80002f6:	e7b4      	b.n	8000262 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002f8:	2302      	movs	r3, #2
 80002fa:	e7b5      	b.n	8000268 <HAL_ADC_ConfigChannel+0x68>
 80002fc:	40012400 	.word	0x40012400
 8000300:	20000008 	.word	0x20000008
 8000304:	000f4240 	.word	0x000f4240

08000308 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000308:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800030a:	6803      	ldr	r3, [r0, #0]
{
 800030c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800030e:	689a      	ldr	r2, [r3, #8]
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	d401      	bmi.n	8000318 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000314:	2000      	movs	r0, #0
 8000316:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	f022 0201 	bic.w	r2, r2, #1
 800031e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000320:	f7ff ff56 	bl	80001d0 <HAL_GetTick>
 8000324:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000326:	6823      	ldr	r3, [r4, #0]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	07db      	lsls	r3, r3, #31
 800032c:	d5f2      	bpl.n	8000314 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800032e:	f7ff ff4f 	bl	80001d0 <HAL_GetTick>
 8000332:	1b40      	subs	r0, r0, r5
 8000334:	2802      	cmp	r0, #2
 8000336:	d9f6      	bls.n	8000326 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000338:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800033a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800033c:	f043 0310 	orr.w	r3, r3, #16
 8000340:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800034a:	bd38      	pop	{r3, r4, r5, pc}

0800034c <HAL_ADC_Init>:
{
 800034c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800034e:	4604      	mov	r4, r0
 8000350:	2800      	cmp	r0, #0
 8000352:	d071      	beq.n	8000438 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000354:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000356:	b923      	cbnz	r3, 8000362 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000358:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800035a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800035e:	f000 ffff 	bl	8001360 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000362:	4620      	mov	r0, r4
 8000364:	f7ff ffd0 	bl	8000308 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800036a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800036e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000370:	d164      	bne.n	800043c <HAL_ADC_Init+0xf0>
 8000372:	2800      	cmp	r0, #0
 8000374:	d162      	bne.n	800043c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000376:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800037c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800037e:	f023 0302 	bic.w	r3, r3, #2
 8000382:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000386:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000388:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800038a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800038c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800038e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000392:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000396:	d038      	beq.n	800040a <HAL_ADC_Init+0xbe>
 8000398:	2901      	cmp	r1, #1
 800039a:	bf14      	ite	ne
 800039c:	4606      	movne	r6, r0
 800039e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003a2:	6965      	ldr	r5, [r4, #20]
 80003a4:	2d01      	cmp	r5, #1
 80003a6:	d107      	bne.n	80003b8 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d130      	bne.n	800040e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80003ac:	69a3      	ldr	r3, [r4, #24]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80003b4:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80003b8:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80003be:	685d      	ldr	r5, [r3, #4]
 80003c0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003c4:	ea45 0506 	orr.w	r5, r5, r6
 80003c8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003ca:	689e      	ldr	r6, [r3, #8]
 80003cc:	4d1d      	ldr	r5, [pc, #116]	; (8000444 <HAL_ADC_Init+0xf8>)
 80003ce:	ea05 0506 	and.w	r5, r5, r6
 80003d2:	ea45 0502 	orr.w	r5, r5, r2
 80003d6:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003d8:	d001      	beq.n	80003de <HAL_ADC_Init+0x92>
 80003da:	2901      	cmp	r1, #1
 80003dc:	d120      	bne.n	8000420 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003de:	6921      	ldr	r1, [r4, #16]
 80003e0:	3901      	subs	r1, #1
 80003e2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003e4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003e6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003ea:	4329      	orrs	r1, r5
 80003ec:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ee:	6899      	ldr	r1, [r3, #8]
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_ADC_Init+0xfc>)
 80003f2:	400b      	ands	r3, r1
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d115      	bne.n	8000424 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003f8:	2300      	movs	r3, #0
 80003fa:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003fe:	f023 0303 	bic.w	r3, r3, #3
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	62a3      	str	r3, [r4, #40]	; 0x28
 8000408:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800040a:	460e      	mov	r6, r1
 800040c:	e7c9      	b.n	80003a2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800040e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000410:	f043 0320 	orr.w	r3, r3, #32
 8000414:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800041e:	e7cb      	b.n	80003b8 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000420:	2100      	movs	r1, #0
 8000422:	e7df      	b.n	80003e4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000426:	f023 0312 	bic.w	r3, r3, #18
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000430:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000438:	2001      	movs	r0, #1
}
 800043a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	62a3      	str	r3, [r4, #40]	; 0x28
 8000442:	e7f9      	b.n	8000438 <HAL_ADC_Init+0xec>
 8000444:	ffe1f7fd 	.word	0xffe1f7fd
 8000448:	ff1f0efe 	.word	0xff1f0efe

0800044c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800044e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000450:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000452:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000456:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800045a:	041b      	lsls	r3, r3, #16
 800045c:	0c1b      	lsrs	r3, r3, #16
 800045e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000466:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000468:	60d3      	str	r3, [r2, #12]
 800046a:	4770      	bx	lr
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	68dc      	ldr	r4, [r3, #12]
 8000476:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800047a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800047e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000480:	2b04      	cmp	r3, #4
 8000482:	bf28      	it	cs
 8000484:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000486:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048c:	bf98      	it	ls
 800048e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000490:	fa05 f303 	lsl.w	r3, r5, r3
 8000494:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000498:	bf88      	it	hi
 800049a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800049c:	4019      	ands	r1, r3
 800049e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004a0:	fa05 f404 	lsl.w	r4, r5, r4
 80004a4:	3c01      	subs	r4, #1
 80004a6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80004a8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004aa:	ea42 0201 	orr.w	r2, r2, r1
 80004ae:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b2:	bfaf      	iteee	ge
 80004b4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	4b06      	ldrlt	r3, [pc, #24]	; (80004d4 <HAL_NVIC_SetPriority+0x64>)
 80004ba:	f000 000f 	andlt.w	r0, r0, #15
 80004be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	bfa5      	ittet	ge
 80004c2:	b2d2      	uxtbge	r2, r2
 80004c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ca:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	e000ed00 	.word	0xe000ed00
 80004d4:	e000ed14 	.word	0xe000ed14

080004d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004d8:	3801      	subs	r0, #1
 80004da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004de:	d20a      	bcs.n	80004f6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000e010 	.word	0xe000e010
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000508:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800050a:	4616      	mov	r6, r2
 800050c:	4b65      	ldr	r3, [pc, #404]	; (80006a4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800050e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80006b4 <HAL_GPIO_Init+0x1b0>
 8000512:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80006b8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000516:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800051a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800051c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000520:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000524:	45a0      	cmp	r8, r4
 8000526:	d17f      	bne.n	8000628 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000528:	684d      	ldr	r5, [r1, #4]
 800052a:	2d12      	cmp	r5, #18
 800052c:	f000 80af 	beq.w	800068e <HAL_GPIO_Init+0x18a>
 8000530:	f200 8088 	bhi.w	8000644 <HAL_GPIO_Init+0x140>
 8000534:	2d02      	cmp	r5, #2
 8000536:	f000 80a7 	beq.w	8000688 <HAL_GPIO_Init+0x184>
 800053a:	d87c      	bhi.n	8000636 <HAL_GPIO_Init+0x132>
 800053c:	2d00      	cmp	r5, #0
 800053e:	f000 808e 	beq.w	800065e <HAL_GPIO_Init+0x15a>
 8000542:	2d01      	cmp	r5, #1
 8000544:	f000 809e 	beq.w	8000684 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000548:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800054c:	2cff      	cmp	r4, #255	; 0xff
 800054e:	bf93      	iteet	ls
 8000550:	4682      	movls	sl, r0
 8000552:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000556:	3d08      	subhi	r5, #8
 8000558:	f8d0 b000 	ldrls.w	fp, [r0]
 800055c:	bf92      	itee	ls
 800055e:	00b5      	lslls	r5, r6, #2
 8000560:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000564:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000566:	fa09 f805 	lsl.w	r8, r9, r5
 800056a:	ea2b 0808 	bic.w	r8, fp, r8
 800056e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000572:	bf88      	it	hi
 8000574:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000578:	ea48 0505 	orr.w	r5, r8, r5
 800057c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000580:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000584:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000588:	d04e      	beq.n	8000628 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800058a:	4d47      	ldr	r5, [pc, #284]	; (80006a8 <HAL_GPIO_Init+0x1a4>)
 800058c:	4f46      	ldr	r7, [pc, #280]	; (80006a8 <HAL_GPIO_Init+0x1a4>)
 800058e:	69ad      	ldr	r5, [r5, #24]
 8000590:	f026 0803 	bic.w	r8, r6, #3
 8000594:	f045 0501 	orr.w	r5, r5, #1
 8000598:	61bd      	str	r5, [r7, #24]
 800059a:	69bd      	ldr	r5, [r7, #24]
 800059c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80005a0:	f005 0501 	and.w	r5, r5, #1
 80005a4:	9501      	str	r5, [sp, #4]
 80005a6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005aa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80005b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005b8:	fa09 f90b 	lsl.w	r9, r9, fp
 80005bc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005c0:	4d3a      	ldr	r5, [pc, #232]	; (80006ac <HAL_GPIO_Init+0x1a8>)
 80005c2:	42a8      	cmp	r0, r5
 80005c4:	d068      	beq.n	8000698 <HAL_GPIO_Init+0x194>
 80005c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ca:	42a8      	cmp	r0, r5
 80005cc:	d066      	beq.n	800069c <HAL_GPIO_Init+0x198>
 80005ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005d2:	42a8      	cmp	r0, r5
 80005d4:	d064      	beq.n	80006a0 <HAL_GPIO_Init+0x19c>
 80005d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005da:	42a8      	cmp	r0, r5
 80005dc:	bf0c      	ite	eq
 80005de:	2503      	moveq	r5, #3
 80005e0:	2504      	movne	r5, #4
 80005e2:	fa05 f50b 	lsl.w	r5, r5, fp
 80005e6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80005ea:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005ee:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005f0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005f4:	bf14      	ite	ne
 80005f6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f8:	43a5      	biceq	r5, r4
 80005fa:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005fc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005fe:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000602:	bf14      	ite	ne
 8000604:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000606:	43a5      	biceq	r5, r4
 8000608:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800060a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800060c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000610:	bf14      	ite	ne
 8000612:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000614:	43a5      	biceq	r5, r4
 8000616:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000618:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800061a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800061e:	bf14      	ite	ne
 8000620:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000622:	ea25 0404 	biceq.w	r4, r5, r4
 8000626:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000628:	3601      	adds	r6, #1
 800062a:	2e10      	cmp	r6, #16
 800062c:	f47f af73 	bne.w	8000516 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000630:	b003      	add	sp, #12
 8000632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000636:	2d03      	cmp	r5, #3
 8000638:	d022      	beq.n	8000680 <HAL_GPIO_Init+0x17c>
 800063a:	2d11      	cmp	r5, #17
 800063c:	d184      	bne.n	8000548 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800063e:	68ca      	ldr	r2, [r1, #12]
 8000640:	3204      	adds	r2, #4
          break;
 8000642:	e781      	b.n	8000548 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000644:	4f1a      	ldr	r7, [pc, #104]	; (80006b0 <HAL_GPIO_Init+0x1ac>)
 8000646:	42bd      	cmp	r5, r7
 8000648:	d009      	beq.n	800065e <HAL_GPIO_Init+0x15a>
 800064a:	d812      	bhi.n	8000672 <HAL_GPIO_Init+0x16e>
 800064c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80006bc <HAL_GPIO_Init+0x1b8>
 8000650:	454d      	cmp	r5, r9
 8000652:	d004      	beq.n	800065e <HAL_GPIO_Init+0x15a>
 8000654:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000658:	454d      	cmp	r5, r9
 800065a:	f47f af75 	bne.w	8000548 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800065e:	688a      	ldr	r2, [r1, #8]
 8000660:	b1c2      	cbz	r2, 8000694 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000662:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000664:	bf0c      	ite	eq
 8000666:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800066a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800066e:	2208      	movs	r2, #8
 8000670:	e76a      	b.n	8000548 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000672:	4575      	cmp	r5, lr
 8000674:	d0f3      	beq.n	800065e <HAL_GPIO_Init+0x15a>
 8000676:	4565      	cmp	r5, ip
 8000678:	d0f1      	beq.n	800065e <HAL_GPIO_Init+0x15a>
 800067a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80006c0 <HAL_GPIO_Init+0x1bc>
 800067e:	e7eb      	b.n	8000658 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000680:	2200      	movs	r2, #0
 8000682:	e761      	b.n	8000548 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000684:	68ca      	ldr	r2, [r1, #12]
          break;
 8000686:	e75f      	b.n	8000548 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000688:	68ca      	ldr	r2, [r1, #12]
 800068a:	3208      	adds	r2, #8
          break;
 800068c:	e75c      	b.n	8000548 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800068e:	68ca      	ldr	r2, [r1, #12]
 8000690:	320c      	adds	r2, #12
          break;
 8000692:	e759      	b.n	8000548 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000694:	2204      	movs	r2, #4
 8000696:	e757      	b.n	8000548 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000698:	2500      	movs	r5, #0
 800069a:	e7a2      	b.n	80005e2 <HAL_GPIO_Init+0xde>
 800069c:	2501      	movs	r5, #1
 800069e:	e7a0      	b.n	80005e2 <HAL_GPIO_Init+0xde>
 80006a0:	2502      	movs	r5, #2
 80006a2:	e79e      	b.n	80005e2 <HAL_GPIO_Init+0xde>
 80006a4:	40010400 	.word	0x40010400
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010800 	.word	0x40010800
 80006b0:	10210000 	.word	0x10210000
 80006b4:	10310000 	.word	0x10310000
 80006b8:	10320000 	.word	0x10320000
 80006bc:	10110000 	.word	0x10110000
 80006c0:	10220000 	.word	0x10220000

080006c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006c4:	b10a      	cbz	r2, 80006ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006c6:	6101      	str	r1, [r0, #16]
 80006c8:	4770      	bx	lr
 80006ca:	0409      	lsls	r1, r1, #16
 80006cc:	e7fb      	b.n	80006c6 <HAL_GPIO_WritePin+0x2>

080006ce <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80006ce:	68c3      	ldr	r3, [r0, #12]
 80006d0:	4059      	eors	r1, r3
 80006d2:	60c1      	str	r1, [r0, #12]
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006d8:	6803      	ldr	r3, [r0, #0]
{
 80006da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006de:	07db      	lsls	r3, r3, #31
{
 80006e0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006e2:	d410      	bmi.n	8000706 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006e4:	682b      	ldr	r3, [r5, #0]
 80006e6:	079f      	lsls	r7, r3, #30
 80006e8:	d45e      	bmi.n	80007a8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006ea:	682b      	ldr	r3, [r5, #0]
 80006ec:	0719      	lsls	r1, r3, #28
 80006ee:	f100 8095 	bmi.w	800081c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006f2:	682b      	ldr	r3, [r5, #0]
 80006f4:	075a      	lsls	r2, r3, #29
 80006f6:	f100 80bf 	bmi.w	8000878 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80006fa:	69ea      	ldr	r2, [r5, #28]
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	f040 812d 	bne.w	800095c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000702:	2000      	movs	r0, #0
 8000704:	e014      	b.n	8000730 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000706:	4c90      	ldr	r4, [pc, #576]	; (8000948 <HAL_RCC_OscConfig+0x270>)
 8000708:	6863      	ldr	r3, [r4, #4]
 800070a:	f003 030c 	and.w	r3, r3, #12
 800070e:	2b04      	cmp	r3, #4
 8000710:	d007      	beq.n	8000722 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000712:	6863      	ldr	r3, [r4, #4]
 8000714:	f003 030c 	and.w	r3, r3, #12
 8000718:	2b08      	cmp	r3, #8
 800071a:	d10c      	bne.n	8000736 <HAL_RCC_OscConfig+0x5e>
 800071c:	6863      	ldr	r3, [r4, #4]
 800071e:	03de      	lsls	r6, r3, #15
 8000720:	d509      	bpl.n	8000736 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	039c      	lsls	r4, r3, #14
 8000726:	d5dd      	bpl.n	80006e4 <HAL_RCC_OscConfig+0xc>
 8000728:	686b      	ldr	r3, [r5, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1da      	bne.n	80006e4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800072e:	2001      	movs	r0, #1
}
 8000730:	b002      	add	sp, #8
 8000732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000736:	686b      	ldr	r3, [r5, #4]
 8000738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800073c:	d110      	bne.n	8000760 <HAL_RCC_OscConfig+0x88>
 800073e:	6823      	ldr	r3, [r4, #0]
 8000740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000744:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000746:	f7ff fd43 	bl	80001d0 <HAL_GetTick>
 800074a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	0398      	lsls	r0, r3, #14
 8000750:	d4c8      	bmi.n	80006e4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000752:	f7ff fd3d 	bl	80001d0 <HAL_GetTick>
 8000756:	1b80      	subs	r0, r0, r6
 8000758:	2864      	cmp	r0, #100	; 0x64
 800075a:	d9f7      	bls.n	800074c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800075c:	2003      	movs	r0, #3
 800075e:	e7e7      	b.n	8000730 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000760:	b99b      	cbnz	r3, 800078a <HAL_RCC_OscConfig+0xb2>
 8000762:	6823      	ldr	r3, [r4, #0]
 8000764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000768:	6023      	str	r3, [r4, #0]
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000770:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000772:	f7ff fd2d 	bl	80001d0 <HAL_GetTick>
 8000776:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	0399      	lsls	r1, r3, #14
 800077c:	d5b2      	bpl.n	80006e4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800077e:	f7ff fd27 	bl	80001d0 <HAL_GetTick>
 8000782:	1b80      	subs	r0, r0, r6
 8000784:	2864      	cmp	r0, #100	; 0x64
 8000786:	d9f7      	bls.n	8000778 <HAL_RCC_OscConfig+0xa0>
 8000788:	e7e8      	b.n	800075c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800078a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800078e:	6823      	ldr	r3, [r4, #0]
 8000790:	d103      	bne.n	800079a <HAL_RCC_OscConfig+0xc2>
 8000792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000796:	6023      	str	r3, [r4, #0]
 8000798:	e7d1      	b.n	800073e <HAL_RCC_OscConfig+0x66>
 800079a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800079e:	6023      	str	r3, [r4, #0]
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a6:	e7cd      	b.n	8000744 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80007a8:	4c67      	ldr	r4, [pc, #412]	; (8000948 <HAL_RCC_OscConfig+0x270>)
 80007aa:	6863      	ldr	r3, [r4, #4]
 80007ac:	f013 0f0c 	tst.w	r3, #12
 80007b0:	d007      	beq.n	80007c2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007b2:	6863      	ldr	r3, [r4, #4]
 80007b4:	f003 030c 	and.w	r3, r3, #12
 80007b8:	2b08      	cmp	r3, #8
 80007ba:	d110      	bne.n	80007de <HAL_RCC_OscConfig+0x106>
 80007bc:	6863      	ldr	r3, [r4, #4]
 80007be:	03da      	lsls	r2, r3, #15
 80007c0:	d40d      	bmi.n	80007de <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	079b      	lsls	r3, r3, #30
 80007c6:	d502      	bpl.n	80007ce <HAL_RCC_OscConfig+0xf6>
 80007c8:	692b      	ldr	r3, [r5, #16]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1af      	bne.n	800072e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	696a      	ldr	r2, [r5, #20]
 80007d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007da:	6023      	str	r3, [r4, #0]
 80007dc:	e785      	b.n	80006ea <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007de:	692a      	ldr	r2, [r5, #16]
 80007e0:	4b5a      	ldr	r3, [pc, #360]	; (800094c <HAL_RCC_OscConfig+0x274>)
 80007e2:	b16a      	cbz	r2, 8000800 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007e8:	f7ff fcf2 	bl	80001d0 <HAL_GetTick>
 80007ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007ee:	6823      	ldr	r3, [r4, #0]
 80007f0:	079f      	lsls	r7, r3, #30
 80007f2:	d4ec      	bmi.n	80007ce <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007f4:	f7ff fcec 	bl	80001d0 <HAL_GetTick>
 80007f8:	1b80      	subs	r0, r0, r6
 80007fa:	2802      	cmp	r0, #2
 80007fc:	d9f7      	bls.n	80007ee <HAL_RCC_OscConfig+0x116>
 80007fe:	e7ad      	b.n	800075c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000800:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000802:	f7ff fce5 	bl	80001d0 <HAL_GetTick>
 8000806:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	0798      	lsls	r0, r3, #30
 800080c:	f57f af6d 	bpl.w	80006ea <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000810:	f7ff fcde 	bl	80001d0 <HAL_GetTick>
 8000814:	1b80      	subs	r0, r0, r6
 8000816:	2802      	cmp	r0, #2
 8000818:	d9f6      	bls.n	8000808 <HAL_RCC_OscConfig+0x130>
 800081a:	e79f      	b.n	800075c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800081c:	69aa      	ldr	r2, [r5, #24]
 800081e:	4c4a      	ldr	r4, [pc, #296]	; (8000948 <HAL_RCC_OscConfig+0x270>)
 8000820:	4b4b      	ldr	r3, [pc, #300]	; (8000950 <HAL_RCC_OscConfig+0x278>)
 8000822:	b1da      	cbz	r2, 800085c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000828:	f7ff fcd2 	bl	80001d0 <HAL_GetTick>
 800082c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800082e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000830:	079b      	lsls	r3, r3, #30
 8000832:	d50d      	bpl.n	8000850 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000834:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000838:	4b46      	ldr	r3, [pc, #280]	; (8000954 <HAL_RCC_OscConfig+0x27c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000840:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000842:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000844:	9b01      	ldr	r3, [sp, #4]
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	9201      	str	r2, [sp, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1f9      	bne.n	8000842 <HAL_RCC_OscConfig+0x16a>
 800084e:	e750      	b.n	80006f2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000850:	f7ff fcbe 	bl	80001d0 <HAL_GetTick>
 8000854:	1b80      	subs	r0, r0, r6
 8000856:	2802      	cmp	r0, #2
 8000858:	d9e9      	bls.n	800082e <HAL_RCC_OscConfig+0x156>
 800085a:	e77f      	b.n	800075c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800085c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800085e:	f7ff fcb7 	bl	80001d0 <HAL_GetTick>
 8000862:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000866:	079f      	lsls	r7, r3, #30
 8000868:	f57f af43 	bpl.w	80006f2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800086c:	f7ff fcb0 	bl	80001d0 <HAL_GetTick>
 8000870:	1b80      	subs	r0, r0, r6
 8000872:	2802      	cmp	r0, #2
 8000874:	d9f6      	bls.n	8000864 <HAL_RCC_OscConfig+0x18c>
 8000876:	e771      	b.n	800075c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000878:	4c33      	ldr	r4, [pc, #204]	; (8000948 <HAL_RCC_OscConfig+0x270>)
 800087a:	69e3      	ldr	r3, [r4, #28]
 800087c:	00d8      	lsls	r0, r3, #3
 800087e:	d424      	bmi.n	80008ca <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000880:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	69e3      	ldr	r3, [r4, #28]
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	61e3      	str	r3, [r4, #28]
 800088a:	69e3      	ldr	r3, [r4, #28]
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000894:	4e30      	ldr	r6, [pc, #192]	; (8000958 <HAL_RCC_OscConfig+0x280>)
 8000896:	6833      	ldr	r3, [r6, #0]
 8000898:	05d9      	lsls	r1, r3, #23
 800089a:	d518      	bpl.n	80008ce <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800089c:	68eb      	ldr	r3, [r5, #12]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d126      	bne.n	80008f0 <HAL_RCC_OscConfig+0x218>
 80008a2:	6a23      	ldr	r3, [r4, #32]
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008aa:	f7ff fc91 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ae:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80008b2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008b4:	6a23      	ldr	r3, [r4, #32]
 80008b6:	079b      	lsls	r3, r3, #30
 80008b8:	d53f      	bpl.n	800093a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	f43f af1d 	beq.w	80006fa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008c0:	69e3      	ldr	r3, [r4, #28]
 80008c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008c6:	61e3      	str	r3, [r4, #28]
 80008c8:	e717      	b.n	80006fa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80008ca:	2700      	movs	r7, #0
 80008cc:	e7e2      	b.n	8000894 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008ce:	6833      	ldr	r3, [r6, #0]
 80008d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80008d6:	f7ff fc7b 	bl	80001d0 <HAL_GetTick>
 80008da:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008dc:	6833      	ldr	r3, [r6, #0]
 80008de:	05da      	lsls	r2, r3, #23
 80008e0:	d4dc      	bmi.n	800089c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008e2:	f7ff fc75 	bl	80001d0 <HAL_GetTick>
 80008e6:	eba0 0008 	sub.w	r0, r0, r8
 80008ea:	2864      	cmp	r0, #100	; 0x64
 80008ec:	d9f6      	bls.n	80008dc <HAL_RCC_OscConfig+0x204>
 80008ee:	e735      	b.n	800075c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f0:	b9ab      	cbnz	r3, 800091e <HAL_RCC_OscConfig+0x246>
 80008f2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f8:	f023 0301 	bic.w	r3, r3, #1
 80008fc:	6223      	str	r3, [r4, #32]
 80008fe:	6a23      	ldr	r3, [r4, #32]
 8000900:	f023 0304 	bic.w	r3, r3, #4
 8000904:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000906:	f7ff fc63 	bl	80001d0 <HAL_GetTick>
 800090a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800090c:	6a23      	ldr	r3, [r4, #32]
 800090e:	0798      	lsls	r0, r3, #30
 8000910:	d5d3      	bpl.n	80008ba <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000912:	f7ff fc5d 	bl	80001d0 <HAL_GetTick>
 8000916:	1b80      	subs	r0, r0, r6
 8000918:	4540      	cmp	r0, r8
 800091a:	d9f7      	bls.n	800090c <HAL_RCC_OscConfig+0x234>
 800091c:	e71e      	b.n	800075c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800091e:	2b05      	cmp	r3, #5
 8000920:	6a23      	ldr	r3, [r4, #32]
 8000922:	d103      	bne.n	800092c <HAL_RCC_OscConfig+0x254>
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6223      	str	r3, [r4, #32]
 800092a:	e7ba      	b.n	80008a2 <HAL_RCC_OscConfig+0x1ca>
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	6223      	str	r3, [r4, #32]
 8000932:	6a23      	ldr	r3, [r4, #32]
 8000934:	f023 0304 	bic.w	r3, r3, #4
 8000938:	e7b6      	b.n	80008a8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800093a:	f7ff fc49 	bl	80001d0 <HAL_GetTick>
 800093e:	eba0 0008 	sub.w	r0, r0, r8
 8000942:	42b0      	cmp	r0, r6
 8000944:	d9b6      	bls.n	80008b4 <HAL_RCC_OscConfig+0x1dc>
 8000946:	e709      	b.n	800075c <HAL_RCC_OscConfig+0x84>
 8000948:	40021000 	.word	0x40021000
 800094c:	42420000 	.word	0x42420000
 8000950:	42420480 	.word	0x42420480
 8000954:	20000008 	.word	0x20000008
 8000958:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800095c:	4c22      	ldr	r4, [pc, #136]	; (80009e8 <HAL_RCC_OscConfig+0x310>)
 800095e:	6863      	ldr	r3, [r4, #4]
 8000960:	f003 030c 	and.w	r3, r3, #12
 8000964:	2b08      	cmp	r3, #8
 8000966:	f43f aee2 	beq.w	800072e <HAL_RCC_OscConfig+0x56>
 800096a:	2300      	movs	r3, #0
 800096c:	4e1f      	ldr	r6, [pc, #124]	; (80009ec <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800096e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000970:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000972:	d12b      	bne.n	80009cc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000974:	f7ff fc2c 	bl	80001d0 <HAL_GetTick>
 8000978:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	0199      	lsls	r1, r3, #6
 800097e:	d41f      	bmi.n	80009c0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000980:	6a2b      	ldr	r3, [r5, #32]
 8000982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000986:	d105      	bne.n	8000994 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000988:	6862      	ldr	r2, [r4, #4]
 800098a:	68a9      	ldr	r1, [r5, #8]
 800098c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000990:	430a      	orrs	r2, r1
 8000992:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000994:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000996:	6862      	ldr	r2, [r4, #4]
 8000998:	430b      	orrs	r3, r1
 800099a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800099e:	4313      	orrs	r3, r2
 80009a0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80009a2:	2301      	movs	r3, #1
 80009a4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80009a6:	f7ff fc13 	bl	80001d0 <HAL_GetTick>
 80009aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	019a      	lsls	r2, r3, #6
 80009b0:	f53f aea7 	bmi.w	8000702 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b4:	f7ff fc0c 	bl	80001d0 <HAL_GetTick>
 80009b8:	1b40      	subs	r0, r0, r5
 80009ba:	2802      	cmp	r0, #2
 80009bc:	d9f6      	bls.n	80009ac <HAL_RCC_OscConfig+0x2d4>
 80009be:	e6cd      	b.n	800075c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c0:	f7ff fc06 	bl	80001d0 <HAL_GetTick>
 80009c4:	1bc0      	subs	r0, r0, r7
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9d7      	bls.n	800097a <HAL_RCC_OscConfig+0x2a2>
 80009ca:	e6c7      	b.n	800075c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80009cc:	f7ff fc00 	bl	80001d0 <HAL_GetTick>
 80009d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	019b      	lsls	r3, r3, #6
 80009d6:	f57f ae94 	bpl.w	8000702 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009da:	f7ff fbf9 	bl	80001d0 <HAL_GetTick>
 80009de:	1b40      	subs	r0, r0, r5
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d9f6      	bls.n	80009d2 <HAL_RCC_OscConfig+0x2fa>
 80009e4:	e6ba      	b.n	800075c <HAL_RCC_OscConfig+0x84>
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	42420060 	.word	0x42420060

080009f0 <HAL_RCC_GetSysClockFreq>:
{
 80009f0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80009f4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009f6:	ac02      	add	r4, sp, #8
 80009f8:	f103 0510 	add.w	r5, r3, #16
 80009fc:	4622      	mov	r2, r4
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	6859      	ldr	r1, [r3, #4]
 8000a02:	3308      	adds	r3, #8
 8000a04:	c203      	stmia	r2!, {r0, r1}
 8000a06:	42ab      	cmp	r3, r5
 8000a08:	4614      	mov	r4, r2
 8000a0a:	d1f7      	bne.n	80009fc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a12:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000a14:	4911      	ldr	r1, [pc, #68]	; (8000a5c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a16:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a1a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a1c:	f003 020c 	and.w	r2, r3, #12
 8000a20:	2a08      	cmp	r2, #8
 8000a22:	d117      	bne.n	8000a54 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a24:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a28:	a806      	add	r0, sp, #24
 8000a2a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a2c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a2e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a32:	d50c      	bpl.n	8000a4e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a34:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a36:	480a      	ldr	r0, [pc, #40]	; (8000a60 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a38:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a3c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a3e:	aa06      	add	r2, sp, #24
 8000a40:	4413      	add	r3, r2
 8000a42:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a46:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000a4a:	b007      	add	sp, #28
 8000a4c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_RCC_GetSysClockFreq+0x74>)
 8000a50:	4350      	muls	r0, r2
 8000a52:	e7fa      	b.n	8000a4a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000a56:	e7f8      	b.n	8000a4a <HAL_RCC_GetSysClockFreq+0x5a>
 8000a58:	0800154c 	.word	0x0800154c
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	007a1200 	.word	0x007a1200
 8000a64:	003d0900 	.word	0x003d0900

08000a68 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a68:	4a54      	ldr	r2, [pc, #336]	; (8000bbc <HAL_RCC_ClockConfig+0x154>)
{
 8000a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a6e:	6813      	ldr	r3, [r2, #0]
{
 8000a70:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	428b      	cmp	r3, r1
{
 8000a78:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a7a:	d32a      	bcc.n	8000ad2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a7c:	6829      	ldr	r1, [r5, #0]
 8000a7e:	078c      	lsls	r4, r1, #30
 8000a80:	d434      	bmi.n	8000aec <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a82:	07ca      	lsls	r2, r1, #31
 8000a84:	d447      	bmi.n	8000b16 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a86:	4a4d      	ldr	r2, [pc, #308]	; (8000bbc <HAL_RCC_ClockConfig+0x154>)
 8000a88:	6813      	ldr	r3, [r2, #0]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	429e      	cmp	r6, r3
 8000a90:	f0c0 8082 	bcc.w	8000b98 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a94:	682a      	ldr	r2, [r5, #0]
 8000a96:	4c4a      	ldr	r4, [pc, #296]	; (8000bc0 <HAL_RCC_ClockConfig+0x158>)
 8000a98:	f012 0f04 	tst.w	r2, #4
 8000a9c:	f040 8087 	bne.w	8000bae <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000aa0:	0713      	lsls	r3, r2, #28
 8000aa2:	d506      	bpl.n	8000ab2 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	692a      	ldr	r2, [r5, #16]
 8000aa8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000aac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ab0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ab2:	f7ff ff9d 	bl	80009f0 <HAL_RCC_GetSysClockFreq>
 8000ab6:	6863      	ldr	r3, [r4, #4]
 8000ab8:	4a42      	ldr	r2, [pc, #264]	; (8000bc4 <HAL_RCC_ClockConfig+0x15c>)
 8000aba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000abe:	5cd3      	ldrb	r3, [r2, r3]
 8000ac0:	40d8      	lsrs	r0, r3
 8000ac2:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <HAL_RCC_ClockConfig+0x160>)
 8000ac4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff fb40 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000acc:	2000      	movs	r0, #0
}
 8000ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ad2:	6813      	ldr	r3, [r2, #0]
 8000ad4:	f023 0307 	bic.w	r3, r3, #7
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000adc:	6813      	ldr	r3, [r2, #0]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d0ca      	beq.n	8000a7c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000aec:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000aee:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000af2:	bf1e      	ittt	ne
 8000af4:	685a      	ldrne	r2, [r3, #4]
 8000af6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000afa:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000afc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000afe:	bf42      	ittt	mi
 8000b00:	685a      	ldrmi	r2, [r3, #4]
 8000b02:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000b06:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	68a8      	ldr	r0, [r5, #8]
 8000b0c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b10:	4302      	orrs	r2, r0
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	e7b5      	b.n	8000a82 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b16:	686a      	ldr	r2, [r5, #4]
 8000b18:	4c29      	ldr	r4, [pc, #164]	; (8000bc0 <HAL_RCC_ClockConfig+0x158>)
 8000b1a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b1c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b1e:	d11c      	bne.n	8000b5a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b24:	d0df      	beq.n	8000ae6 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b26:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b28:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b2c:	f023 0303 	bic.w	r3, r3, #3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000b34:	f7ff fb4c 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b38:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000b3a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d114      	bne.n	8000b6a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b40:	6863      	ldr	r3, [r4, #4]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d09d      	beq.n	8000a86 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b4a:	f7ff fb41 	bl	80001d0 <HAL_GetTick>
 8000b4e:	1bc0      	subs	r0, r0, r7
 8000b50:	4540      	cmp	r0, r8
 8000b52:	d9f5      	bls.n	8000b40 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000b54:	2003      	movs	r0, #3
 8000b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b5a:	2a02      	cmp	r2, #2
 8000b5c:	d102      	bne.n	8000b64 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b62:	e7df      	b.n	8000b24 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b64:	f013 0f02 	tst.w	r3, #2
 8000b68:	e7dc      	b.n	8000b24 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d10f      	bne.n	8000b8e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b6e:	6863      	ldr	r3, [r4, #4]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d086      	beq.n	8000a86 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b78:	f7ff fb2a 	bl	80001d0 <HAL_GetTick>
 8000b7c:	1bc0      	subs	r0, r0, r7
 8000b7e:	4540      	cmp	r0, r8
 8000b80:	d9f5      	bls.n	8000b6e <HAL_RCC_ClockConfig+0x106>
 8000b82:	e7e7      	b.n	8000b54 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b84:	f7ff fb24 	bl	80001d0 <HAL_GetTick>
 8000b88:	1bc0      	subs	r0, r0, r7
 8000b8a:	4540      	cmp	r0, r8
 8000b8c:	d8e2      	bhi.n	8000b54 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b8e:	6863      	ldr	r3, [r4, #4]
 8000b90:	f013 0f0c 	tst.w	r3, #12
 8000b94:	d1f6      	bne.n	8000b84 <HAL_RCC_ClockConfig+0x11c>
 8000b96:	e776      	b.n	8000a86 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b98:	6813      	ldr	r3, [r2, #0]
 8000b9a:	f023 0307 	bic.w	r3, r3, #7
 8000b9e:	4333      	orrs	r3, r6
 8000ba0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ba2:	6813      	ldr	r3, [r2, #0]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	429e      	cmp	r6, r3
 8000baa:	d19c      	bne.n	8000ae6 <HAL_RCC_ClockConfig+0x7e>
 8000bac:	e772      	b.n	8000a94 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bae:	6863      	ldr	r3, [r4, #4]
 8000bb0:	68e9      	ldr	r1, [r5, #12]
 8000bb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	6063      	str	r3, [r4, #4]
 8000bba:	e771      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x38>
 8000bbc:	40022000 	.word	0x40022000
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	0800155c 	.word	0x0800155c
 8000bc8:	20000008 	.word	0x20000008

08000bcc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000bcc:	6803      	ldr	r3, [r0, #0]
{
 8000bce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000bd2:	07d9      	lsls	r1, r3, #31
{
 8000bd4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000bd6:	d520      	bpl.n	8000c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bd8:	4c35      	ldr	r4, [pc, #212]	; (8000cb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000bda:	69e3      	ldr	r3, [r4, #28]
 8000bdc:	00da      	lsls	r2, r3, #3
 8000bde:	d432      	bmi.n	8000c46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000be0:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	69e3      	ldr	r3, [r4, #28]
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	61e3      	str	r3, [r4, #28]
 8000bea:	69e3      	ldr	r3, [r4, #28]
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bf4:	4e2f      	ldr	r6, [pc, #188]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000bf6:	6833      	ldr	r3, [r6, #0]
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	d526      	bpl.n	8000c4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000bfc:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000bfe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c02:	d136      	bne.n	8000c72 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c04:	6a23      	ldr	r3, [r4, #32]
 8000c06:	686a      	ldr	r2, [r5, #4]
 8000c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c10:	b11f      	cbz	r7, 8000c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c12:	69e3      	ldr	r3, [r4, #28]
 8000c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c18:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000c1a:	6828      	ldr	r0, [r5, #0]
 8000c1c:	0783      	lsls	r3, r0, #30
 8000c1e:	d506      	bpl.n	8000c2e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000c20:	4a23      	ldr	r2, [pc, #140]	; (8000cb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000c22:	68a9      	ldr	r1, [r5, #8]
 8000c24:	6853      	ldr	r3, [r2, #4]
 8000c26:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c2a:	430b      	orrs	r3, r1
 8000c2c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000c2e:	f010 0010 	ands.w	r0, r0, #16
 8000c32:	d01b      	beq.n	8000c6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000c34:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000c36:	68e9      	ldr	r1, [r5, #12]
 8000c38:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000c3a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000c3c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c40:	430b      	orrs	r3, r1
 8000c42:	6053      	str	r3, [r2, #4]
 8000c44:	e012      	b.n	8000c6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000c46:	2700      	movs	r7, #0
 8000c48:	e7d4      	b.n	8000bf4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c4a:	6833      	ldr	r3, [r6, #0]
 8000c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c50:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c52:	f7ff fabd 	bl	80001d0 <HAL_GetTick>
 8000c56:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c58:	6833      	ldr	r3, [r6, #0]
 8000c5a:	05d8      	lsls	r0, r3, #23
 8000c5c:	d4ce      	bmi.n	8000bfc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c5e:	f7ff fab7 	bl	80001d0 <HAL_GetTick>
 8000c62:	eba0 0008 	sub.w	r0, r0, r8
 8000c66:	2864      	cmp	r0, #100	; 0x64
 8000c68:	d9f6      	bls.n	8000c58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000c6a:	2003      	movs	r0, #3
}
 8000c6c:	b002      	add	sp, #8
 8000c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c72:	686a      	ldr	r2, [r5, #4]
 8000c74:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d0c3      	beq.n	8000c04 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c80:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c82:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c84:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c8a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000c8c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c8e:	07d9      	lsls	r1, r3, #31
 8000c90:	d5b8      	bpl.n	8000c04 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000c92:	f7ff fa9d 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c96:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000c9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c9c:	6a23      	ldr	r3, [r4, #32]
 8000c9e:	079a      	lsls	r2, r3, #30
 8000ca0:	d4b0      	bmi.n	8000c04 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ca2:	f7ff fa95 	bl	80001d0 <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	4540      	cmp	r0, r8
 8000caa:	d9f7      	bls.n	8000c9c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000cac:	e7dd      	b.n	8000c6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40007000 	.word	0x40007000
 8000cb8:	42420440 	.word	0x42420440

08000cbc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cbc:	6a03      	ldr	r3, [r0, #32]
{
 8000cbe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cc0:	f023 0301 	bic.w	r3, r3, #1
 8000cc4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000cc6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000cc8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000cca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ccc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000cce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000cd2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000cd4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000cd6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000cda:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000cdc:	4d0a      	ldr	r5, [pc, #40]	; (8000d08 <TIM_OC1_SetConfig+0x4c>)
 8000cde:	42a8      	cmp	r0, r5
 8000ce0:	d10b      	bne.n	8000cfa <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000ce2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000ce4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000ce8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000cea:	698e      	ldr	r6, [r1, #24]
 8000cec:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000cee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000cf2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000cf4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000cf8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000cfa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000cfc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000cfe:	684a      	ldr	r2, [r1, #4]
 8000d00:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d02:	6203      	str	r3, [r0, #32]
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
 8000d06:	bf00      	nop
 8000d08:	40012c00 	.word	0x40012c00

08000d0c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000d0c:	6a03      	ldr	r3, [r0, #32]
{
 8000d0e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d14:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d16:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000d18:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d1a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000d1e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d22:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d24:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000d26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000d2e:	4d0b      	ldr	r5, [pc, #44]	; (8000d5c <TIM_OC3_SetConfig+0x50>)
 8000d30:	42a8      	cmp	r0, r5
 8000d32:	d10d      	bne.n	8000d50 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000d34:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000d3a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d3e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000d40:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000d42:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d46:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d4c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d50:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000d52:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000d54:	684a      	ldr	r2, [r1, #4]
 8000d56:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d58:	6203      	str	r3, [r0, #32]
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000d60:	6a03      	ldr	r3, [r0, #32]
{
 8000d62:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000d6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d6e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000d72:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000d7a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000d7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000d80:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000d84:	4d06      	ldr	r5, [pc, #24]	; (8000da0 <TIM_OC4_SetConfig+0x40>)
 8000d86:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000d88:	bf02      	ittt	eq
 8000d8a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000d8c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000d90:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d94:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000d96:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000d98:	684a      	ldr	r2, [r1, #4]
 8000d9a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d9c:	6203      	str	r3, [r0, #32]
 8000d9e:	bd30      	pop	{r4, r5, pc}
 8000da0:	40012c00 	.word	0x40012c00

08000da4 <HAL_TIM_PWM_MspInit>:
 8000da4:	4770      	bx	lr

08000da6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000da6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000daa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	f04f 0302 	mov.w	r3, #2
 8000db2:	d01c      	beq.n	8000dee <HAL_TIM_ConfigClockSource+0x48>
 8000db4:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000db6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000dba:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000dbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000dc0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dc2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000dc6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000dca:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000dcc:	680a      	ldr	r2, [r1, #0]
 8000dce:	2a40      	cmp	r2, #64	; 0x40
 8000dd0:	d079      	beq.n	8000ec6 <HAL_TIM_ConfigClockSource+0x120>
 8000dd2:	d819      	bhi.n	8000e08 <HAL_TIM_ConfigClockSource+0x62>
 8000dd4:	2a10      	cmp	r2, #16
 8000dd6:	f000 8093 	beq.w	8000f00 <HAL_TIM_ConfigClockSource+0x15a>
 8000dda:	d80a      	bhi.n	8000df2 <HAL_TIM_ConfigClockSource+0x4c>
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	f000 8089 	beq.w	8000ef4 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000de8:	2300      	movs	r3, #0
 8000dea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000dee:	4618      	mov	r0, r3
}
 8000df0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000df2:	2a20      	cmp	r2, #32
 8000df4:	f000 808a 	beq.w	8000f0c <HAL_TIM_ConfigClockSource+0x166>
 8000df8:	2a30      	cmp	r2, #48	; 0x30
 8000dfa:	d1f2      	bne.n	8000de2 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000dfc:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e02:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000e06:	e036      	b.n	8000e76 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000e08:	2a70      	cmp	r2, #112	; 0x70
 8000e0a:	d036      	beq.n	8000e7a <HAL_TIM_ConfigClockSource+0xd4>
 8000e0c:	d81b      	bhi.n	8000e46 <HAL_TIM_ConfigClockSource+0xa0>
 8000e0e:	2a50      	cmp	r2, #80	; 0x50
 8000e10:	d042      	beq.n	8000e98 <HAL_TIM_ConfigClockSource+0xf2>
 8000e12:	2a60      	cmp	r2, #96	; 0x60
 8000e14:	d1e5      	bne.n	8000de2 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e16:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e18:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e1a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e1e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e20:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e22:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000e24:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e26:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e2e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e32:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000e36:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000e38:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000e3a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e40:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000e44:	e017      	b.n	8000e76 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000e46:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000e4a:	d011      	beq.n	8000e70 <HAL_TIM_ConfigClockSource+0xca>
 8000e4c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e50:	d1c7      	bne.n	8000de2 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e52:	688a      	ldr	r2, [r1, #8]
 8000e54:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e56:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e58:	68c9      	ldr	r1, [r1, #12]
 8000e5a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e5c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e64:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e66:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e6e:	e002      	b.n	8000e76 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	e7b3      	b.n	8000de2 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e7a:	688a      	ldr	r2, [r1, #8]
 8000e7c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e7e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e80:	68c9      	ldr	r1, [r1, #12]
 8000e82:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e84:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e8c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000e8e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000e90:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000e92:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000e96:	e7ee      	b.n	8000e76 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000e98:	684c      	ldr	r4, [r1, #4]
 8000e9a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000e9c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e9e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ea0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ea4:	f025 0501 	bic.w	r5, r5, #1
 8000ea8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000eaa:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000eac:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000eae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000eb2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000eb8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000eba:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ebc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ec0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000ec4:	e7d7      	b.n	8000e76 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ec6:	684c      	ldr	r4, [r1, #4]
 8000ec8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000eca:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ecc:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ece:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ed2:	f025 0501 	bic.w	r5, r5, #1
 8000ed6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ed8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000eda:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000edc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ee0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ee6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000ee8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000eea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000eee:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000ef2:	e7c0      	b.n	8000e76 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000ef4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ef6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000efa:	f042 0207 	orr.w	r2, r2, #7
 8000efe:	e7ba      	b.n	8000e76 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f00:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f06:	f042 0217 	orr.w	r2, r2, #23
 8000f0a:	e7b4      	b.n	8000e76 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f0c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f12:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000f16:	e7ae      	b.n	8000e76 <HAL_TIM_ConfigClockSource+0xd0>

08000f18 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f18:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000f1a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f1c:	4290      	cmp	r0, r2
 8000f1e:	d00a      	beq.n	8000f36 <TIM_Base_SetConfig+0x1e>
 8000f20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f24:	d007      	beq.n	8000f36 <TIM_Base_SetConfig+0x1e>
 8000f26:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f2a:	4290      	cmp	r0, r2
 8000f2c:	d003      	beq.n	8000f36 <TIM_Base_SetConfig+0x1e>
 8000f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f32:	4290      	cmp	r0, r2
 8000f34:	d115      	bne.n	8000f62 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000f36:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f3c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f3e:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <TIM_Base_SetConfig+0x6c>)
 8000f40:	4290      	cmp	r0, r2
 8000f42:	d00a      	beq.n	8000f5a <TIM_Base_SetConfig+0x42>
 8000f44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f48:	d007      	beq.n	8000f5a <TIM_Base_SetConfig+0x42>
 8000f4a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f4e:	4290      	cmp	r0, r2
 8000f50:	d003      	beq.n	8000f5a <TIM_Base_SetConfig+0x42>
 8000f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f56:	4290      	cmp	r0, r2
 8000f58:	d103      	bne.n	8000f62 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f5a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f60:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000f62:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000f68:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000f6a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f6c:	688b      	ldr	r3, [r1, #8]
 8000f6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f70:	680b      	ldr	r3, [r1, #0]
 8000f72:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <TIM_Base_SetConfig+0x6c>)
 8000f76:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000f78:	bf04      	itt	eq
 8000f7a:	690b      	ldreq	r3, [r1, #16]
 8000f7c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	6143      	str	r3, [r0, #20]
 8000f82:	4770      	bx	lr
 8000f84:	40012c00 	.word	0x40012c00

08000f88 <HAL_TIM_Base_Init>:
{
 8000f88:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	b1a0      	cbz	r0, 8000fb8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f96:	b91b      	cbnz	r3, 8000fa0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f9c:	f000 fa0e 	bl	80013bc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000fa0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fa2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000fa4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fa8:	1d21      	adds	r1, r4, #4
 8000faa:	f7ff ffb5 	bl	8000f18 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000fae:	2301      	movs	r3, #1
  return HAL_OK;
 8000fb0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000fb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000fb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fb8:	2001      	movs	r0, #1
}
 8000fba:	bd10      	pop	{r4, pc}

08000fbc <HAL_TIM_PWM_Init>:
{
 8000fbc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	b1a0      	cbz	r0, 8000fec <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000fc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000fc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fca:	b91b      	cbnz	r3, 8000fd4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000fcc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000fd0:	f7ff fee8 	bl	8000da4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000fd4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fd6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000fd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fdc:	1d21      	adds	r1, r4, #4
 8000fde:	f7ff ff9b 	bl	8000f18 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000fe2:	2301      	movs	r3, #1
  return HAL_OK;
 8000fe4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000fe6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000fea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
}
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ff0:	6a03      	ldr	r3, [r0, #32]
{
 8000ff2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ff4:	f023 0310 	bic.w	r3, r3, #16
 8000ff8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000ffa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000ffc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000ffe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001000:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001002:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001006:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800100a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800100c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001010:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001014:	4d0b      	ldr	r5, [pc, #44]	; (8001044 <TIM_OC2_SetConfig+0x54>)
 8001016:	42a8      	cmp	r0, r5
 8001018:	d10d      	bne.n	8001036 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800101a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800101c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001020:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001024:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001026:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001028:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800102c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800102e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001032:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001036:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001038:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800103a:	684a      	ldr	r2, [r1, #4]
 800103c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800103e:	6203      	str	r3, [r0, #32]
 8001040:	bd70      	pop	{r4, r5, r6, pc}
 8001042:	bf00      	nop
 8001044:	40012c00 	.word	0x40012c00

08001048 <HAL_TIM_PWM_ConfigChannel>:
{
 8001048:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800104a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800104e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001050:	2b01      	cmp	r3, #1
 8001052:	f04f 0002 	mov.w	r0, #2
 8001056:	d025      	beq.n	80010a4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001058:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800105a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800105e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001062:	2a0c      	cmp	r2, #12
 8001064:	d818      	bhi.n	8001098 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001066:	e8df f002 	tbb	[pc, r2]
 800106a:	1707      	.short	0x1707
 800106c:	171e1717 	.word	0x171e1717
 8001070:	172f1717 	.word	0x172f1717
 8001074:	1717      	.short	0x1717
 8001076:	40          	.byte	0x40
 8001077:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001078:	6820      	ldr	r0, [r4, #0]
 800107a:	f7ff fe1f 	bl	8000cbc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800107e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001080:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001082:	699a      	ldr	r2, [r3, #24]
 8001084:	f042 0208 	orr.w	r2, r2, #8
 8001088:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800108a:	699a      	ldr	r2, [r3, #24]
 800108c:	f022 0204 	bic.w	r2, r2, #4
 8001090:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001092:	699a      	ldr	r2, [r3, #24]
 8001094:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001096:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001098:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800109a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800109c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80010a0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80010a4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80010a6:	6820      	ldr	r0, [r4, #0]
 80010a8:	f7ff ffa2 	bl	8000ff0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80010ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80010ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80010b0:	699a      	ldr	r2, [r3, #24]
 80010b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80010b8:	699a      	ldr	r2, [r3, #24]
 80010ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80010c0:	699a      	ldr	r2, [r3, #24]
 80010c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010c6:	e7e6      	b.n	8001096 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80010c8:	6820      	ldr	r0, [r4, #0]
 80010ca:	f7ff fe1f 	bl	8000d0c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80010ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80010d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80010d2:	69da      	ldr	r2, [r3, #28]
 80010d4:	f042 0208 	orr.w	r2, r2, #8
 80010d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	f022 0204 	bic.w	r2, r2, #4
 80010e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80010e2:	69da      	ldr	r2, [r3, #28]
 80010e4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80010e6:	61da      	str	r2, [r3, #28]
    break;
 80010e8:	e7d6      	b.n	8001098 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80010ea:	6820      	ldr	r0, [r4, #0]
 80010ec:	f7ff fe38 	bl	8000d60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80010f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80010f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80010f4:	69da      	ldr	r2, [r3, #28]
 80010f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80010fc:	69da      	ldr	r2, [r3, #28]
 80010fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001102:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001104:	69da      	ldr	r2, [r3, #28]
 8001106:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800110a:	e7ec      	b.n	80010e6 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800110c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800110c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001110:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001112:	2b01      	cmp	r3, #1
 8001114:	f04f 0302 	mov.w	r3, #2
 8001118:	d018      	beq.n	800114c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800111a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800111e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001120:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001122:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001124:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001126:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800112a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4322      	orrs	r2, r4
 8001130:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001138:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	430a      	orrs	r2, r1
 800113e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001140:	2301      	movs	r3, #1
 8001142:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001146:	2300      	movs	r3, #0
 8001148:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800114c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800114e:	bd10      	pop	{r4, pc}

08001150 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001150:	2228      	movs	r2, #40	; 0x28
{
 8001152:	b510      	push	{r4, lr}
 8001154:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	eb0d 0002 	add.w	r0, sp, r2
 800115a:	2100      	movs	r1, #0
 800115c:	f000 f9e2 	bl	8001524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	2214      	movs	r2, #20
 8001162:	2100      	movs	r1, #0
 8001164:	eb0d 0002 	add.w	r0, sp, r2
 8001168:	f000 f9dc 	bl	8001524 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	2100      	movs	r1, #0
 800116e:	2210      	movs	r2, #16
 8001170:	a801      	add	r0, sp, #4
 8001172:	f000 f9d7 	bl	8001524 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001180:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001182:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001188:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800118c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f7ff faa2 	bl	80006d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001194:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001196:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119e:	4621      	mov	r1, r4
 80011a0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011aa:	f7ff fc5d 	bl	8000a68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011b4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011b6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	f7ff fd08 	bl	8000bcc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80011bc:	b014      	add	sp, #80	; 0x50
 80011be:	bd10      	pop	{r4, pc}

080011c0 <main>:
{
 80011c0:	b500      	push	{lr}
 80011c2:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 80011c4:	f7fe ffe6 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80011c8:	f7ff ffc2 	bl	8001150 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	2210      	movs	r2, #16
 80011ce:	2100      	movs	r1, #0
 80011d0:	a80b      	add	r0, sp, #44	; 0x2c
 80011d2:	f000 f9a7 	bl	8001524 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <main+0x144>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Pin_GPIO_Port, Led_Pin_Pin, GPIO_PIN_RESET);
 80011d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(Led_Pin_GPIO_Port, Led_Pin_Pin, GPIO_PIN_RESET);
 80011de:	484a      	ldr	r0, [pc, #296]	; (8001308 <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e0:	f042 0210 	orr.w	r2, r2, #16
 80011e4:	619a      	str	r2, [r3, #24]
 80011e6:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : Led_Pin_Pin */
  GPIO_InitStruct.Pin = Led_Pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	f002 0210 	and.w	r2, r2, #16
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 80011f4:	4d45      	ldr	r5, [pc, #276]	; (800130c <main+0x14c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	f042 0220 	orr.w	r2, r2, #32
 80011fa:	619a      	str	r2, [r3, #24]
 80011fc:	699a      	ldr	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011fe:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001200:	f002 0220 	and.w	r2, r2, #32
 8001204:	9202      	str	r2, [sp, #8]
 8001206:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	f042 0204 	orr.w	r2, r2, #4
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	699a      	ldr	r2, [r3, #24]
 8001212:	f002 0204 	and.w	r2, r2, #4
 8001216:	9203      	str	r2, [sp, #12]
 8001218:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	f042 0208 	orr.w	r2, r2, #8
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(Led_Pin_GPIO_Port, Led_Pin_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	9304      	str	r3, [sp, #16]
 800122c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(Led_Pin_GPIO_Port, Led_Pin_Pin, GPIO_PIN_RESET);
 800122e:	f7ff fa49 	bl	80006c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Led_Pin_Pin;
 8001232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001236:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001238:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Led_Pin_GPIO_Port, &GPIO_InitStruct);
 800123a:	a90b      	add	r1, sp, #44	; 0x2c
 800123c:	4832      	ldr	r0, [pc, #200]	; (8001308 <main+0x148>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(Led_Pin_GPIO_Port, &GPIO_InitStruct);
 8001244:	f7ff f95e 	bl	8000504 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001248:	4b31      	ldr	r3, [pc, #196]	; (8001310 <main+0x150>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800124a:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 800124c:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001252:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001254:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001256:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001258:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125a:	606c      	str	r4, [r5, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800125c:	940b      	str	r4, [sp, #44]	; 0x2c
 800125e:	940c      	str	r4, [sp, #48]	; 0x30
 8001260:	940d      	str	r4, [sp, #52]	; 0x34
  hadc1.Init.NbrOfConversion = 1;
 8001262:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001264:	f7ff f872 	bl	800034c <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	a90b      	add	r1, sp, #44	; 0x2c
 800126a:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800126c:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.Channel = ADC_CHANNEL_1;
 800126e:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001270:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001272:	f7fe ffc5 	bl	8000200 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	4621      	mov	r1, r4
 8001278:	2210      	movs	r2, #16
 800127a:	a807      	add	r0, sp, #28
  htim3.Instance = TIM3;
 800127c:	4d25      	ldr	r5, [pc, #148]	; (8001314 <main+0x154>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f000 f951 	bl	8001524 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001282:	221c      	movs	r2, #28
 8001284:	4621      	mov	r1, r4
 8001286:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	9405      	str	r4, [sp, #20]
 800128a:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128c:	f000 f94a 	bl	8001524 <memset>
  htim3.Instance = TIM3;
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <main+0x158>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001292:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 8001294:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
 800129a:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a0:	f7ff fe72 	bl	8000f88 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a8:	a907      	add	r1, sp, #28
 80012aa:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ac:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ae:	f7ff fd7a 	bl	8000da6 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b2:	4628      	mov	r0, r5
 80012b4:	f7ff fe82 	bl	8000fbc <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b8:	a905      	add	r1, sp, #20
 80012ba:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012bc:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c0:	f7ff ff24 	bl	800110c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c6:	2208      	movs	r2, #8
 80012c8:	a90b      	add	r1, sp, #44	; 0x2c
 80012ca:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012cc:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80012ce:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d0:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d4:	f7ff feb8 	bl	8001048 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d8:	220c      	movs	r2, #12
 80012da:	a90b      	add	r1, sp, #44	; 0x2c
 80012dc:	4628      	mov	r0, r5
 80012de:	f7ff feb3 	bl	8001048 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80012e2:	4628      	mov	r0, r5
 80012e4:	f000 f87e 	bl	80013e4 <HAL_TIM_MspPostInit>
	  HAL_GPIO_TogglePin(Led_Pin_GPIO_Port,Led_Pin_Pin);
 80012e8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80012ec:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
 80012f0:	4620      	mov	r0, r4
 80012f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f6:	f7ff f9ea 	bl	80006ce <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f7fe ff6d 	bl	80001dc <HAL_Delay>
 8001302:	e7f5      	b.n	80012f0 <main+0x130>
 8001304:	40021000 	.word	0x40021000
 8001308:	40011000 	.word	0x40011000
 800130c:	2000006c 	.word	0x2000006c
 8001310:	40012400 	.word	0x40012400
 8001314:	2000002c 	.word	0x2000002c
 8001318:	40000400 	.word	0x40000400

0800131c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_MspInit+0x3c>)
{
 800131e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	619a      	str	r2, [r3, #24]
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	f002 0201 	and.w	r2, r2, #1
 800132e:	9200      	str	r2, [sp, #0]
 8001330:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	69da      	ldr	r2, [r3, #28]
 8001334:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001338:	61da      	str	r2, [r3, #28]
 800133a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001346:	6853      	ldr	r3, [r2, #4]
 8001348:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800134c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	b002      	add	sp, #8
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000

08001360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001360:	b510      	push	{r4, lr}
 8001362:	4604      	mov	r4, r0
 8001364:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	2210      	movs	r2, #16
 8001368:	2100      	movs	r1, #0
 800136a:	a802      	add	r0, sp, #8
 800136c:	f000 f8da 	bl	8001524 <memset>
  if(hadc->Instance==ADC1)
 8001370:	6822      	ldr	r2, [r4, #0]
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_ADC_MspInit+0x54>)
 8001374:	429a      	cmp	r2, r3
 8001376:	d11b      	bne.n	80013b0 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001378:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800137c:	699a      	ldr	r2, [r3, #24]
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001384:	619a      	str	r2, [r3, #24]
 8001386:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800138a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800138e:	9200      	str	r2, [sp, #0]
 8001390:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	f042 0204 	orr.w	r2, r2, #4
 8001398:	619a      	str	r2, [r3, #24]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80013a4:	231f      	movs	r3, #31
 80013a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a8:	2303      	movs	r3, #3
 80013aa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f7ff f8aa 	bl	8000504 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b0:	b006      	add	sp, #24
 80013b2:	bd10      	pop	{r4, pc}
 80013b4:	40012400 	.word	0x40012400
 80013b8:	40010800 	.word	0x40010800

080013bc <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM3)
 80013bc:	6802      	ldr	r2, [r0, #0]
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_TIM_Base_MspInit+0x24>)
{
 80013c0:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d10a      	bne.n	80013dc <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013c6:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80013ca:	69da      	ldr	r2, [r3, #28]
 80013cc:	f042 0202 	orr.w	r2, r2, #2
 80013d0:	61da      	str	r2, [r3, #28]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013dc:	b002      	add	sp, #8
 80013de:	4770      	bx	lr
 80013e0:	40000400 	.word	0x40000400

080013e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e4:	b510      	push	{r4, lr}
 80013e6:	4604      	mov	r4, r0
 80013e8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	2210      	movs	r2, #16
 80013ec:	2100      	movs	r1, #0
 80013ee:	a802      	add	r0, sp, #8
 80013f0:	f000 f898 	bl	8001524 <memset>
  if(htim->Instance==TIM3)
 80013f4:	6822      	ldr	r2, [r4, #0]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_TIM_MspPostInit+0x44>)
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d113      	bne.n	8001424 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001400:	699a      	ldr	r2, [r3, #24]
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	f042 0208 	orr.w	r2, r2, #8
 8001408:	619a      	str	r2, [r3, #24]
 800140a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001416:	2303      	movs	r3, #3
 8001418:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f7ff f870 	bl	8000504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001424:	b006      	add	sp, #24
 8001426:	bd10      	pop	{r4, pc}
 8001428:	40000400 	.word	0x40000400
 800142c:	40010c00 	.word	0x40010c00

08001430 <NMI_Handler>:
 8001430:	4770      	bx	lr

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler>

0800143a <SVC_Handler>:
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f7fe beba 	b.w	80001b8 <HAL_IncTick>

08001444 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <SystemInit+0x40>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	f042 0201 	orr.w	r2, r2, #1
 800144c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <SystemInit+0x44>)
 8001452:	400a      	ands	r2, r1
 8001454:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800145c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001460:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001468:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001470:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001472:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001476:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001478:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <SystemInit+0x48>)
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	f8ff0000 	.word	0xf8ff0000
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001490:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001492:	e003      	b.n	800149c <LoopCopyDataInit>

08001494 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001496:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001498:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800149a:	3104      	adds	r1, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014a4:	d3f6      	bcc.n	8001494 <CopyDataInit>
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014a8:	e002      	b.n	80014b0 <LoopFillZerobss>

080014aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014ac:	f842 3b04 	str.w	r3, [r2], #4

080014b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014b4:	d3f9      	bcc.n	80014aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014b6:	f7ff ffc5 	bl	8001444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f000 f80f 	bl	80014dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014be:	f7ff fe7f 	bl	80011c0 <main>
  bx lr
 80014c2:	4770      	bx	lr
  ldr r3, =_sidata
 80014c4:	08001574 	.word	0x08001574
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80014d0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80014d4:	2000009c 	.word	0x2000009c

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>
	...

080014dc <__libc_init_array>:
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	2500      	movs	r5, #0
 80014e0:	4e0c      	ldr	r6, [pc, #48]	; (8001514 <__libc_init_array+0x38>)
 80014e2:	4c0d      	ldr	r4, [pc, #52]	; (8001518 <__libc_init_array+0x3c>)
 80014e4:	1ba4      	subs	r4, r4, r6
 80014e6:	10a4      	asrs	r4, r4, #2
 80014e8:	42a5      	cmp	r5, r4
 80014ea:	d109      	bne.n	8001500 <__libc_init_array+0x24>
 80014ec:	f000 f822 	bl	8001534 <_init>
 80014f0:	2500      	movs	r5, #0
 80014f2:	4e0a      	ldr	r6, [pc, #40]	; (800151c <__libc_init_array+0x40>)
 80014f4:	4c0a      	ldr	r4, [pc, #40]	; (8001520 <__libc_init_array+0x44>)
 80014f6:	1ba4      	subs	r4, r4, r6
 80014f8:	10a4      	asrs	r4, r4, #2
 80014fa:	42a5      	cmp	r5, r4
 80014fc:	d105      	bne.n	800150a <__libc_init_array+0x2e>
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
 8001500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001504:	4798      	blx	r3
 8001506:	3501      	adds	r5, #1
 8001508:	e7ee      	b.n	80014e8 <__libc_init_array+0xc>
 800150a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800150e:	4798      	blx	r3
 8001510:	3501      	adds	r5, #1
 8001512:	e7f2      	b.n	80014fa <__libc_init_array+0x1e>
 8001514:	0800156c 	.word	0x0800156c
 8001518:	0800156c 	.word	0x0800156c
 800151c:	0800156c 	.word	0x0800156c
 8001520:	08001570 	.word	0x08001570

08001524 <memset>:
 8001524:	4603      	mov	r3, r0
 8001526:	4402      	add	r2, r0
 8001528:	4293      	cmp	r3, r2
 800152a:	d100      	bne.n	800152e <memset+0xa>
 800152c:	4770      	bx	lr
 800152e:	f803 1b01 	strb.w	r1, [r3], #1
 8001532:	e7f9      	b.n	8001528 <memset+0x4>

08001534 <_init>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	bf00      	nop
 8001538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153a:	bc08      	pop	{r3}
 800153c:	469e      	mov	lr, r3
 800153e:	4770      	bx	lr

08001540 <_fini>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	bf00      	nop
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr
